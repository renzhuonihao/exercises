(define (accumulate combiner null-value term a next b)
  (define (iter result a)
    (if (> a b)
        result 
        (iter (combiner result (term a)) (next a))))
  (iter null-value a))
;确实好多了，又快又省内存
(define (product term a next b)
  (accumulate * 1 term a next b))
(define (factor b)
  (define (son k)
    (cond ((even? k) (+ k 2))
          (else (+ k 1))))
  (define (mother k)
    (cond ((even? k) (+ k 1))
          (else (+ k 2))))
  (define (term k)
    (/ (son k) (mother k)))
  (define (fa-next k)
    (+ 1 k))
  (product term 1.0 fa-next b))
(define (run-test)
  (display (* 4 (factor 1000000)))
  (newline)
  (display (* 4 (factor 100000))))