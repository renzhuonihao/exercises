 (define (cont-frac n d k)
   (define (iter-cont-frac n d count product)
     (if (= count 0)
	 product
	 (iter-cont-frac n d (- count 1) (/ (n count) (+ (d count) product)))))
   (iter-cont-frac n d k 0))

(define (how-big-k n d tolerance)
  (define (close-enough? a b)
    (< (abs (- a b)) tolerance))
  (define (try k-term)
    (let ((this (cont-frac n d k-term))
           (next (cont-frac n d (+ k-term 1))))
      (if (close-enough? this next)
          (+ k-term 1)
          (try (+ 1 k-term)))))
  (try 1))
;写的好丑...,乱七八糟的,程序组织的不好
(define (run-test)
  (display (how-big-k (lambda (i) 1.0)
                      (lambda (i) 1.0)
                      0.0001))
  (newline)
  (display (how-big-k (lambda (i) 1.0)
                      (lambda (i) 1.0)
                      0.00000001)))