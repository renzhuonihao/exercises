(define (cont-frac n d k)
  (define (cont-rec m count)
    (if (= m 1)
        (/ (n k) (d k))
        (/ (n (+ count 1))
           (+ (d (+ count 1))
              (cont-rec (- m 1) (+ count 1))))))
  (cont-rec k 0)) 
(define (how-big-k n d tolerance)
  (define (close-enough? a b)
    (< (abs (- a b)) tolerance))
  (define (try k-term)
    (let ((this (cont-frac n d k-term))
           (next (cont-frac n d (+ k-term 1))))
      (if (close-enough? this next)
          (+ k-term 1)
          (try (+ 1 k-term)))))
  (try 1))
;写的好丑...,乱七八糟的,程序组织的不好
(define (run-test)
  (display (how-big-k (lambda (i) 1.0)
                      (lambda (i) 1.0)
                      0.0001))
  (newline)
  (display (how-big-k (lambda (i) 1.0)
                      (lambda (i) 1.0)
                      0.00000001)))
;词法作用域别白学啊
;这个递归版本写的真是蛋疼，好别扭啊。