(define (square x) (* x x))
(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) m)) 
                    m))
        (else
         (remainder (* base (expmod base (- exp 1) m))
                    m))))
(define (iter-test a n)
  (cond ((= a n) #t)
        ((= (expmod a n n) a) (iter-test (+ a 1) n))
        (else
         #f)))
(define (car-test n)
  (iter-test 1 n))
(define (run)
  (display (car-test 561))
  (display (car-test 1105))
  (display (car-test 1729))
  (display (car-test 2465))
  (display (car-test 2821))
  (display (car-test 6601)))