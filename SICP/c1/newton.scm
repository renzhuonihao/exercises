(define tolerance 0.00001)
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))
(define (average x y)
  (/ (+ x y) 2))
(define (average-damp f)
  (lambda (x) (average (f x) x)))
(define (square x) (* x x))
(define (deriv g)
  (lambda (x)
    (/ (- (g (+ x dx)) (g x)) dx)))
(define dx 0.00001)
(define (newton-transform g)
  (lambda (x)
    (- x (/ (g x) ((deriv g) x)))))
(define (newtons-method g guess)
  (fixed-point (newton-transform g) guess))
(define (sqrt-my x)
  (newtons-method (lambda (y) (- (square y) x))
		  1.0))


(define (fixed-point-of-transform g transform guess)
  (fixed-point (transform g) guess))
(define (sqrt-my-high-damp x)
  (fixed-point-of-transform (lambda (y) (/ x y))
			    average-damp
			    1.0))

(define (sqrt-my-high-newton x)
  (fixed-point-of-transform (lambda (y) (- (square y) x))
			    newton-transform
			    1.0))


(define (test x)
  (display (sqrt-my-high-newton x))
  (newline)
  (display (sqrt-my-high-damp x))
  (newline)
  (display (sqrt-my x))
  (newline))
(define (run-test)
  (test 12)
  (test 23)
  (test 16))
