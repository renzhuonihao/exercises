;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-advanced-reader.ss" "lang")((modname |22|) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #t #t none #f ())))
(define (smallest-divisor n)
  (find-divisor n 2))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))
(define (divides? a b)
  (= (remainder b a) 0))
(define (square x) (* x x))
(define (prime? n)
  (= n (smallest-divisor n)))



(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (runtime) start-time))))
(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))

(define (search-for-primes this n)
  (cond ((= n 0) true)
        ((prime? this) ((timed-prime-test this) (search-for-primes (next-odd this) (- n 1))))
        (else (search-for-primes (next-odd this) n))))
(define (next-odd this)
  (if (even? this)
      (+ this 1)
      (+ this 2)))
;(define (continue-primes n count)
;    (cond ((= count 0)
;            (display "are primes."))
;          ((prime? n)
;            (display n)
;            (newline)
;            (continue-primes (next-odd n) (- count 1)))
;          (else
;            (continue-primes (next-odd n) count))))
;(define (test-foo)
;    (let ((start-time (real-time-clock)))
;        (foo)
;        (- (real-time-clock) start-time)))
;(define (search-for-primes n)
;    (let ((start-time (real-time-clock)))
;        (continue-primes n 3)
;        (- (real-time-clock) start-time)))