(define (make-rat n d)
  (let ((g (gcd n d))
        (an (abs n))
        (ad (abs d)))
  (cond ((> (* n d) 0) (cons (/ an g) (/ ad g)))
        ((< (* n d) 0) (cons (- (/ an g)) (/ ad g))))))
;;哎呀我草，写的太复杂了，网上的版本真是突出一个精简

(define (numer x) (car x))
(define (denom x) (cdr x))
(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
	       (* (numer y) (denom x)))
	    (* (denom x) (denom y))))
(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
	       (* (numer y) (denom x)))
	    (* (denom x) (numer y))))
(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
	    (* (denom x) (denom y))))
(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
	    (* (denom x) (numer y))))
(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))
(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))
