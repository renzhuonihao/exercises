(define nil '())
(define (s-t t f)
  (cond ((null? t) nil)
        ((not (pair? t)) (* f t))
        (else (cons (s-t (car t) f)
                    (s-t (cdr t) f)))))
(define (scale-tree tree fac)
  (map (lambda (sub-tree)
         (if (pair? sub-tree)
             (scale-tree sub-tree fac)
             (* sub-tree fac)))
       tree))

(define both (list 1 (list 2 (list 3 4) 5) (list 6 7)))
(define just-for-1 (cons 2 (cons 3 (cons 7 8))))
